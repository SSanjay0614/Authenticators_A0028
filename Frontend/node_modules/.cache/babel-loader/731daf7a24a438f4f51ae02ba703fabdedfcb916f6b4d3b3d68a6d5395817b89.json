{"ast":null,"code":"var _jsxFileName = \"/Users/aashik/FINAL/src/components/SolubilityChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SolubilityChecker = () => {\n  _s();\n  const [smiles, setSmiles] = useState('');\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setPrediction(null);\n    try {\n      const response = await axios.post('http://localhost:5000/predict', {\n        smiles\n      });\n      setPrediction(response.data.prediction[0]);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'An error occurred while predicting solubility.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const interpretSolubility = value => {\n    if (value > 0) {\n      return 'Highly Soluble';\n    } else if (value > -2) {\n      return 'Moderately Soluble';\n    } else {\n      return 'Poorly Soluble';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solubility-checker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Solubility Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: smiles,\n        onChange: e => setSmiles(e.target.value),\n        placeholder: \"Enter SMILES string\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Predicting...' : 'Predict Solubility'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), prediction !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Solubility:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"prediction-value\",\n        children: [prediction.toFixed(2), \" log(mol/L)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"interpretation\",\n        children: interpretSolubility(prediction)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"About this predictor:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This solubility predictor uses a machine learning model trained on chemical structures to estimate the solubility of compounds. It takes a SMILES string as input and returns the predicted solubility in log(mol/L).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The model uses Morgan fingerprints with a radius of 2 and a bit vector length of 1024 to featurize the input SMILES string.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SolubilityChecker, \"iOPqlYrIWV3yWcyJHS59yTfRROE=\");\n_c = SolubilityChecker;\nexport default SolubilityChecker;\nvar _c;\n$RefreshReg$(_c, \"SolubilityChecker\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","SolubilityChecker","_s","smiles","setSmiles","prediction","setPrediction","error","setError","loading","setLoading","handleSubmit","e","preventDefault","response","post","data","err","_err$response","_err$response$data","interpretSolubility","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","placeholder","required","disabled","toFixed","_c","$RefreshReg$"],"sources":["/Users/aashik/FINAL/src/components/SolubilityChecker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SolubilityChecker = () => {\r\n  const [smiles, setSmiles] = useState('');\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n    setPrediction(null);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/predict', { smiles });\r\n      setPrediction(response.data.prediction[0]);\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'An error occurred while predicting solubility.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const interpretSolubility = (value) => {\r\n    if (value > 0) {\r\n      return 'Highly Soluble';\r\n    } else if (value > -2) {\r\n      return 'Moderately Soluble';\r\n    } else {\r\n      return 'Poorly Soluble';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"solubility-checker\">\r\n      <h2>Solubility Checker</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={smiles}\r\n          onChange={(e) => setSmiles(e.target.value)}\r\n          placeholder=\"Enter SMILES string\"\r\n          required\r\n        />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? 'Predicting...' : 'Predict Solubility'}\r\n        </button>\r\n      </form>\r\n      {error && <p className=\"error\">{error}</p>}\r\n      {prediction !== null && (\r\n        <div className=\"result\">\r\n          <h3>Predicted Solubility:</h3>\r\n          <p className=\"prediction-value\">{prediction.toFixed(2)} log(mol/L)</p>\r\n          <p className=\"interpretation\">{interpretSolubility(prediction)}</p>\r\n        </div>\r\n      )}\r\n      <div className=\"info\">\r\n        <h4>About this predictor:</h4>\r\n        <p>This solubility predictor uses a machine learning model trained on chemical structures to estimate the solubility of compounds. It takes a SMILES string as input and returns the predicted solubility in log(mol/L).</p>\r\n        <p>The model uses Morgan fingerprints with a radius of 2 and a bit vector length of 1024 to featurize the input SMILES string.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolubilityChecker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}