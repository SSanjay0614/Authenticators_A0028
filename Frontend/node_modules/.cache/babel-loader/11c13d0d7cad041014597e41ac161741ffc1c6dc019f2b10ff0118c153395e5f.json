{"ast":null,"code":"var _jsxFileName = \"/Users/aashik/FINAL/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css'; // Import CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([{\n    text: 'Welcome to DrugForge! How can I assist you today?',\n    sender: 'bot'\n  }]);\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeChat = () => {\n    setIsOpen(false);\n  };\n  const handleSendMessage = () => {\n    if (message.trim() !== '') {\n      setMessages([...messages, {\n        text: message,\n        sender: 'user'\n      }]);\n      setMessage('');\n      // Add logic to respond to user's message\n      const response = getResponse(message);\n      setMessages([...messages, {\n        text: response,\n        sender: 'bot'\n      }]);\n    }\n  };\n  const getResponse = message => {\n    // Add logic to respond to user's message\n    // For now, just return a default response\n    return 'Thank you for your message! I\\'ll do my best to help you.';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat with Us\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeChat,\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === 'bot' ? 'bot-message' : 'user-message'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-icon\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        width: \"50\",\n        height: \"50\",\n        loop: true,\n        autoPlay: true,\n        muted: true,\n        children: \"Your browser does not support the video tag.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleChat,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: \"https://res.cloudinary.com/dvude7m7p/video/upload/v1728057294/DrugForge/kdoaxazwcl8tqx30irun.mp4\",\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"IEGXvkH9CFZRQEJAOT2ohY3LCAs=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","message","setMessage","messages","setMessages","text","sender","toggleChat","closeChat","handleSendMessage","trim","response","getResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","placeholder","value","onChange","e","target","width","height","loop","autoPlay","muted","src","_c","$RefreshReg$"],"sources":["/Users/aashik/FINAL/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css'; // Import CSS file for styling\n\nconst Chatbot = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([\n        { text: 'Welcome to DrugForge! How can I assist you today?', sender: 'bot' }\n    ]);\n\n    const toggleChat = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const closeChat = () => {\n        setIsOpen(false);\n    };\n\n    const handleSendMessage = () => {\n        if (message.trim() !== '') {\n            setMessages([...messages, { text: message, sender: 'user' }]);\n            setMessage('');\n            // Add logic to respond to user's message\n            const response = getResponse(message);\n            setMessages([...messages, { text: response, sender: 'bot' }]);\n        }\n    };\n\n    const getResponse = (message) => {\n        // Add logic to respond to user's message\n        // For now, just return a default response\n        return 'Thank you for your message! I\\'ll do my best to help you.';\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            {isOpen ? (\n                <div className=\"chatbot-window\">\n                    <div className=\"chatbot-header\">\n                        <h3>Chat with Us</h3>\n                        <button className=\"close-button\" onClick={closeChat}>âœ–</button>\n                    </div>\n                    <div className=\"chatbot-body\">\n                        <div className=\"messages\">\n                            {messages.map((message, index) => (\n                                <div key={index} className={`message ${message.sender === 'bot' ? 'bot-message' : 'user-message'}`}>\n                                    <p>{message.text}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"chatbot-input\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Type your message...\"\n                            value={message}\n                            onChange={(e) => setMessage(e.target.value)}\n                        />\n                        <button onClick={handleSendMessage}>Send</button>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"chatbot-icon\">\n                    <video width=\"50\" height=\"50\" loop autoPlay muted>\n                        Your browser does not support the video tag.\n                    </video>\n                    <button onClick={toggleChat}>\n                    <source src=\"https://res.cloudinary.com/dvude7m7p/video/upload/v1728057294/DrugForge/kdoaxazwcl8tqx30irun.mp4\" type=\"video/mp4\" />\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}